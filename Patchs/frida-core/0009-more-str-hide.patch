From 2dd0b24e632c6d13f04c78bd27e3eff526e2f957 Mon Sep 17 00:00:00 2001
From: Forgo7ten <Forgo7ten2020@gmail.com>
Date: Sat, 18 Feb 2023 22:37:34 +0800
Subject: [PATCH 9/9] more str hide

---
 src/anti-anti-frida.py | 44 ++++++++++++++++++++++++++++++++++++------
 1 file changed, 38 insertions(+), 6 deletions(-)

diff --git a/src/anti-anti-frida.py b/src/anti-anti-frida.py
index b4b8dca6..d633eccc 100644
--- a/src/anti-anti-frida.py
+++ b/src/anti-anti-frida.py
@@ -3,17 +3,23 @@ import sys
 import random
 import os
 
+def log_color(msg):
+    print(f"\033[1;31;40m{msg}\033[0m")
+
 if __name__ == "__main__":
+    log_color("[*] >>>>>>>>>>>>>>>>>>>> Patch Start >>>>>>>>>>>>>>>>>>>>")
     input_file = sys.argv[1]
-    print(f"[*] Patch frida-agent: {input_file}")
-    random_name = "".join(random.sample("ABCDEFGHIJKLMNO", 5))
-    print(f"[*] Patch `frida` to `{random_name}``")
+    log_color(f"[*] Patch frida-agent: {input_file}")
 
     binary = lief.parse(input_file)
 
     if not binary:
+        log_color("Not binary, exit()")
         exit()
 
+    random_name = "".join(random.sample("ABCDEFGHIJKLMNO", 5))
+    log_color(f"[*] Patch `frida` to `{random_name}``")
+
     for symbol in binary.symbols:
         if symbol.name == "frida_agent_main":
             symbol.name = "main"
@@ -24,14 +30,40 @@ if __name__ == "__main__":
         if "FRIDA" in symbol.name:
             symbol.name = symbol.name.replace("FRIDA", random_name)
 
+    all_patch_string = ["FridaScriptEngine", "GLib-GIO", "GDBusProxy", "GumScript"]
+    for section in binary.sections:
+        # log_color(section.name)
+        if section.name != ".rodata":
+            continue
+        for patch_str in all_patch_string:
+            addr_all = section.search_all(patch_str)
+            for addr in addr_all:
+                patch = [ord(n) for n in list(patch_str)[::-1]] # reverse string
+                # log_color(f"current section name={section.name} offset={hex(section.file_offset + addr)} {patch_str}-{"".join(list(patch_str)[::-1])}")
+                log_color(f"[*] Patch {section.name}:{patch_str}")
+                binary.patch_address(section.file_offset + addr, patch)
+ 
     binary.write(input_file)
 
     # gum-js-loop thread
     random_name = "".join(random.sample("abcdefghijklmn", 11))
-    print(f"[*] Patch `gum-js-loop` to `{random_name}`")
+    log_color(f"[*] Patch `gum-js-loop` to `{random_name}`")
     os.system(f"sed -b -i s/gum-js-loop/{random_name}/g {input_file}")
 
     # gmain thread
     random_name = "".join(random.sample("abcdefghijklmn", 5))
-    print(f"[*] Patch `gmain` to `{random_name}`")
-    os.system(f"sed -b -i s/gmain/{random_name}/g {input_file}")
\ No newline at end of file
+    log_color(f"[*] Patch `gmain` to `{random_name}`")
+    os.system(f"sed -b -i s/gmain/{random_name}/g {input_file}")
+
+    # gdbus thread
+    random_name = "".join(random.sample("abcdefghijklmn", 5))
+    log_color(f"[*] Patch `gdbus` to `{random_name}`")
+    os.system(f"sed -b -i s/gdbus/{random_name}/g {input_file}")
+
+    # pool-frida thread(unused)
+    random_name = "".join(random.sample("abcdefghijklmn", 10))
+    log_color(f"[*] Patch `pool-frida` to `{random_name}`")
+    os.system(f"sed -b -i s/pool-frida/{random_name}/g {input_file}")
+
+
+    log_color("[*] <<<<<<<<<<<<<<<<<<<< Patch Success <<<<<<<<<<<<<<<<<<<<")
\ No newline at end of file
-- 
2.25.1

